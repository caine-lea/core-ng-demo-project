import org.gradle.internal.os.OperatingSystem

// use gradlew -Penv=${env} to pass
def env = hasProperty('env') ? env : null

apply plugin: 'application'
mainClassName = 'Main'

def npm(String... params) {
    def isWindows = OperatingSystem.current().isWindows()
    return {
        workingDir "${rootDir}/gradle/node"
        def command = isWindows ? ['cmd', '/c', 'npm'] : ['npm']
        command.addAll(params)
        commandLine command
    }
}

clean {
    if (project.file('src/main/web').exists()) {
        doLast {
            exec npm('install')
            exec npm('run', 'clean', '--', '--root', project.file('.') as String)
        }
    }
}

processResources {
    if (env != null) {
        assert project.file("conf/${env}/resources").exists()
        inputs.file project.file("conf/${env}/resources")
        from "conf/${env}/resources"
    }
    if (project.file('src/main/web').exists()) {
        inputs.file project.file('src/main/web')
        doLast {
            exec npm('install')
            exec npm('run', 'build', '--', '--root', project.file('.') as String)
        }
    }
}

distTar {
    archiveName "${baseName}.${extension}"
}

startScripts {
    defaultJvmOpts = ['-Dcore.webPath=APP_HOME_VAR/web', "-Dcore.appName=${project.name}"]

    doLast {
        windowsScript.text = windowsScript.text.replaceFirst('APP_HOME_VAR', '%APP_HOME%')
        unixScript.text = unixScript.text.replaceFirst('APP_HOME_VAR', '\\$APP_HOME')
    }
}

distributions {
    distZip.enabled = false
    if (env != null && project.file("conf/${env}/web").exists()) {
        main {
            contents {
                from("conf/${env}/web") {
                    into "web"
                }
            }
        }
    }
}
