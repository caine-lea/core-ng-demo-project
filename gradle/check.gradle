buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs:gradlePlugin:1.6.0"
    }
}

apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: com.github.spotbugs.SpotBugsPlugin
apply plugin: 'jacoco'

checkstyle {
    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:8.4'
        checkstyle 'com.github.sevntu-checkstyle:sevntu-checks:1.24.2'
    }

    configFile = rootProject.file('gradle/checkstyle/checkstyle.xml')
    configProperties['configDir'] = configFile.parentFile
}

pmd {
    ruleSets = []
    ruleSetFiles = rootProject.files('gradle/pmd/rule-set.xml')
    toolVersion = '5.8.1'
    consoleOutput = true
}

spotbugs {
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = rootProject.file('gradle/spotbugs/exclude-filter.xml')
    toolVersion = '3.1.0'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

project.afterEvaluate {
    def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

    jacoco {
        toolVersion = '0.7.9'
        applyTo junitPlatformTestTask
    }

    project.task(type: JacocoReport, 'junitPlatformJacocoReport', {
        executionData junitPlatformTestTask
        sourceDirectories = files(sourceSets["main"].allSource.srcDirs)
        classDirectories = files(sourceSets["main"].output)
        reports {
            xml.enabled true
            xml.destination rootProject.file("${buildDir}/reports/jacoco/report.xml")
            html.enabled false
            csv.enabled false
        }
    })
}
